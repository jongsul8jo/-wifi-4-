#include <WiFiNINA.h>

// WiFi 연결 정보
const char* ssid = ""; // WiFi SSID
const char* password = ""; // WiFi 비밀번호
const char* server = ""; // 서버 IP 주소
const int port = 8080; // 서버 포트

const int mq7Pin0 = A0; // MQ-7 센서가 A0 핀에 연결됨
const int mq7Pin1 = A1;
const int mq7Pin2 = A2;
const int mq7Pin3 = A3;

const unsigned long sampleInterval = 500; // 0.5초마다 데이터 수집
const unsigned long sendInterval = 5000; // 5초마다 평균 데이터 전송

unsigned long lastSampleTime = 0;
unsigned long lastSendTime = 0;

const int numSamples = 10; // 5초 동안 0.5초마다 10개의 샘플
int mq7Values0[numSamples];
int mq7Values1[numSamples];
int mq7Values2[numSamples];
int mq7Values3[numSamples];
int sampleIndex = 0;

WiFiClient client;

void setup() {
  Serial.begin(9600);

  // WiFi 연결 초기화
  while (WiFi.begin(ssid, password) != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // 센서 핀 모드 설정
  pinMode(mq7Pin0, INPUT);
  pinMode(mq7Pin1, INPUT);
  pinMode(mq7Pin2, INPUT);
  pinMode(mq7Pin3, INPUT);
}

void loop() {
  unsigned long currentMillis = millis();

  // 0.5초마다 데이터 수집
  if (currentMillis - lastSampleTime >= sampleInterval) {
    lastSampleTime = currentMillis;

    mq7Values0[sampleIndex] = analogRead(mq7Pin0);
    mq7Values1[sampleIndex] = analogRead(mq7Pin1);
    mq7Values2[sampleIndex] = analogRead(mq7Pin2);
    mq7Values3[sampleIndex] = analogRead(mq7Pin3);

    sampleIndex = (sampleIndex + 1) % numSamples;
  }

  // 5초마다 평균 데이터 전송
  if (currentMillis - lastSendTime >= sendInterval) {
    lastSendTime = currentMillis;

    if (sampleIndex > 0) {
      int mq7Value0Sum = 0;
      int mq7Value1Sum = 0;
      int mq7Value2Sum = 0;
      int mq7Value3Sum = 0;

      for (int i = 0; i < numSamples; i++) {
        mq7Value0Sum += mq7Values0[i];
        mq7Value1Sum += mq7Values1[i];
        mq7Value2Sum += mq7Values2[i];
        mq7Value3Sum += mq7Values3[i];
      }

      int mq7Value0Avg = mq7Value0Sum / numSamples;
      int mq7Value1Avg = mq7Value1Sum / numSamples;
      int mq7Value2Avg = mq7Value2Sum / numSamples;
      int mq7Value3Avg = mq7Value3Sum / numSamples;

      Serial.print("MQ-7 Sensor Averages: ");
      Serial.println(mq7Value0Avg);
      Serial.println(mq7Value1Avg);
      Serial.println(mq7Value2Avg);
      Serial.println(mq7Value3Avg);

      // 서버에 연결
      if (client.connect(server, port)) {
        Serial.println("Connected to server");

        // 전송할 평균 데이터 준비
        String data = "GET /update?value0=" + String(mq7Value0Avg) + "&value1=" + String(mq7Value1Avg) + "&value2=" + String(mq7Value2Avg) + "&value3=" + String(mq7Value3Avg) + " HTTP/1.1\r\nHost: " + String(server) + "\r\nConnection: close\r\n\r\n";

        // 데이터 전송
        client.print(data);
        Serial.println("Data sent to server");

        // 서버 응답 대기
        while (client.connected()) {
          if (client.available()) {
            String line = client.readStringUntil('\r');
            Serial.print(line);
          }
        }

        // 연결 종료
        client.stop();
        Serial.println("Disconnected from server");
      } else {
        Serial.println("Failed to connect to server");
      }
    }
  }
}
